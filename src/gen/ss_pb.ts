// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file ss.proto (package ssspam.ss, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message ssspam.ss.SaySound
 */
export class SaySound extends Message<SaySound> {
  /**
   * Name of the sound. This is the name of the file without the extension.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * List of original sources of the sound, collected from the file's metadata.
   *
   * @generated from field: repeated string sources = 2;
   */
  sources: string[] = [];

  /**
   * Duration of the sound.
   *
   * @generated from field: google.protobuf.Duration duration = 3;
   */
  duration?: Duration;

  /**
   * Timestamp of when the sound was created.
   *
   * @generated from field: google.protobuf.Timestamp created = 4;
   */
  created?: Timestamp;

  constructor(data?: PartialMessage<SaySound>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ssspam.ss.SaySound";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "duration", kind: "message", T: Duration },
    { no: 4, name: "created", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SaySound {
    return new SaySound().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SaySound {
    return new SaySound().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SaySound {
    return new SaySound().fromJsonString(jsonString, options);
  }

  static equals(a: SaySound | PlainMessage<SaySound> | undefined, b: SaySound | PlainMessage<SaySound> | undefined): boolean {
    return proto3.util.equals(SaySound, a, b);
  }
}

/**
 * @generated from message ssspam.ss.Sounds
 */
export class Sounds extends Message<Sounds> {
  /**
   * List of sounds.
   *
   * @generated from field: repeated ssspam.ss.SaySound sounds = 1;
   */
  sounds: SaySound[] = [];

  constructor(data?: PartialMessage<Sounds>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ssspam.ss.Sounds";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sounds", kind: "message", T: SaySound, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Sounds {
    return new Sounds().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Sounds {
    return new Sounds().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Sounds {
    return new Sounds().fromJsonString(jsonString, options);
  }

  static equals(a: Sounds | PlainMessage<Sounds> | undefined, b: Sounds | PlainMessage<Sounds> | undefined): boolean {
    return proto3.util.equals(Sounds, a, b);
  }
}

